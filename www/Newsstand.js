// Generated by CoffeeScript 1.8.0
/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *
*/;
var Newsstand, NewsstandItem, exec;

exec = require('cordova/exec');

NewsstandItem = (function() {
  function NewsstandItem(name, date, status, url) {
    this.name = name;
    this.date = date;
    this.status = status != null ? status : null;
    this.url = url;
    this;
  }

  NewsstandItem.prototype.save = function(successCallback, errorCallback) {
    exec(successCallback, errorCallback, 'Newsstand', 'addItem', [this.name, this.date, this.coverUrl]);
    return this;
  };

  NewsstandItem.prototype.archive = function(successCallback, errorCallback) {
    exec(successCallback, errorCallback, 'Newsstand', 'archiveItem', [this.name]);
    return this;
  };

  NewsstandItem.prototype.remove = function(successCallback, errorCallback) {
    exec(successCallback, errorCallback, 'Newsstand', 'removeItem', [this.name]);
    return this;
  };

  return NewsstandItem;

})();

Newsstand = (function() {
  function Newsstand() {}

  Newsstand.prototype.getItems = function(successCallback, errorCallback) {
    exec(function(success) {
      var issue, issues, _i, _len;
      issues = [];
      for (_i = 0, _len = success.length; _i < _len; _i++) {
        issue = success[_i];
        issues.push(new NewsstandItem(issue.name, issue.date, issue.status, issue.contentURL));
      }
      return successCallback(issues);
    }, errorCallback, 'Newsstand', 'getItems', []);
    return this;
  };

  Newsstand.prototype.addItem = function(issueName, issueDate, coverURL) {
    return new NewsstandItem(issueName, issueDate, coverURL);
  };

  Newsstand.prototype.updateNewsstandIconImage = function(coverURL, successCallback, errorCallback) {
    exec(successCallback, errorCallback, 'Newsstand', 'updateNewsstandIconImage', [coverURL]);
    return this;
  };

  return Newsstand;

})();

module.exports = new Newsstand(this);
